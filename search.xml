<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Springboot3+Vue3项目初始化</title>
      <link href="/2025/05/17/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2025/05/17/%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="构建一个-Springboot3-Vue3-的全栈项目的步骤"><a href="#构建一个-Springboot3-Vue3-的全栈项目的步骤" class="headerlink" title="构建一个 Springboot3 + Vue3 的全栈项目的步骤"></a>构建一个 Springboot3 + Vue3 的全栈项目的步骤</h2><ol>    <li>        <details class="folding-tag" green><summary> 创建 Vue3 项目 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        创建项目之后，安装一些必要的依赖, 这个icon图标很有必要安装        <details class="folding-tag" green><summary> 进入vue项目，安装依赖 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd vue-project &amp;&amp; npm install axios element-plus @element-plus/icons-vue</span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 首先配置vite.config.js </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line"><span class="code">    &#x27;/api&#x27;: &#123;</span></span><br><span class="line"><span class="code">      target: &#x27;http://localhost:8080&#x27;,</span></span><br><span class="line"><span class="code">      changeOrigin: true,</span></span><br><span class="line"><span class="code">      rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 创建api请求工具request.js </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line"><span class="code">    baseURL: &#x27;/api&#x27;,</span></span><br><span class="line"><span class="code">    timeout: 5000</span></span><br><span class="line"><span class="code">&#125;)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 请求拦截器</span><br><span class="line">service.interceptors.request.use(</span><br><span class="line"><span class="code">    config =&gt; &#123;</span></span><br><span class="line"><span class="code">        // 在这里可以添加token等认证信息</span></span><br><span class="line"><span class="code">        const token = localStorage.getItem(&#x27;token&#x27;)</span></span><br><span class="line"><span class="code">        if (token) &#123;</span></span><br><span class="line"><span class="code">            config.headers[&#x27;Authorization&#x27;] = `Bearer $&#123;token&#125;`</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return config</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    error =&gt; &#123;</span></span><br><span class="line"><span class="code">        console.error(error)</span></span><br><span class="line"><span class="code">        return Promise.reject(error)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 响应拦截器</span><br><span class="line">service.interceptors.response.use(</span><br><span class="line"><span class="code">    response =&gt; &#123;</span></span><br><span class="line"><span class="code">        const res = response.data</span></span><br><span class="line"><span class="code">        // 这里可以根据后端返回的状态码进行不同的处理</span></span><br><span class="line"><span class="code">        if (res.code === 200) &#123;</span></span><br><span class="line"><span class="code">            return res</span></span><br><span class="line"><span class="code">        &#125; else &#123;</span></span><br><span class="line"><span class="code">            ElMessage.error(res.message || &#x27;请求失败&#x27;)</span></span><br><span class="line"><span class="code">            return Promise.reject(new Error(res.message || &#x27;请求失败&#x27;))</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    error =&gt; &#123;</span></span><br><span class="line"><span class="code">        console.error(&#x27;请求错误:&#x27;, error)</span></span><br><span class="line"><span class="code">        ElMessage.error(error.message || &#x27;请求失败&#x27;)</span></span><br><span class="line"><span class="code">        return Promise.reject(error)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">export default service</span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 创建API接口文件：新建api包，里面新增js文件 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import request from &#x27;@/utils/request&#x27;</span><br><span class="line"></span><br><span class="line">// 用户登录</span><br><span class="line">export function login(data) &#123;</span><br><span class="line"><span class="code">    return request(&#123;</span></span><br><span class="line"><span class="code">        url: &#x27;/user/login&#x27;,</span></span><br><span class="line"><span class="code">        method: &#x27;post&#x27;,</span></span><br><span class="line"><span class="code">        data</span></span><br><span class="line"><span class="code">    &#125;)</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 获取用户信息</span><br><span class="line">export function getUserInfo() &#123;</span><br><span class="line"><span class="code">    return request(&#123;</span></span><br><span class="line"><span class="code">        url: &#x27;/user/info&#x27;,</span></span><br><span class="line"><span class="code">        method: &#x27;get&#x27;</span></span><br><span class="line"><span class="code">    &#125;)</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 用户注册</span><br><span class="line">export function register(data) &#123;</span><br><span class="line"><span class="code">    return request(&#123;</span></span><br><span class="line"><span class="code">        url: &#x27;/user/register&#x27;,</span></span><br><span class="line"><span class="code">        method: &#x27;post&#x27;,</span></span><br><span class="line"><span class="code">        data</span></span><br><span class="line"><span class="code">    &#125;)</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 退出登录</span><br><span class="line">export function logout() &#123;</span><br><span class="line"><span class="code">    return request(&#123;</span></span><br><span class="line"><span class="code">        url: &#x27;/user/logout&#x27;,</span></span><br><span class="line"><span class="code">        method: &#x27;post&#x27;</span></span><br><span class="line"><span class="code">    &#125;)</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 在组件中使用API </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; login &#125; from &#x27;@/api/user&#x27;</span><br><span class="line">const handleLogin = async () =&gt; &#123;</span><br><span class="line"><span class="code">    if (!loginFormRef.value) return</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    try &#123;</span></span><br><span class="line"><span class="code">        await loginFormRef.value.validate()</span></span><br><span class="line"><span class="code">        loading.value = true</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">        const res = await login(loginForm)</span></span><br><span class="line"><span class="code">        if (res.code === 200) &#123;</span></span><br><span class="line"><span class="code">            ElMessage.success(&#x27;登录成功&#x27;)</span></span><br><span class="line"><span class="code">            localStorage.setItem(&#x27;token&#x27;, res.data.token)</span></span><br><span class="line"><span class="code">            router.push(&#x27;/&#x27;)</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125; catch (error) &#123;</span></span><br><span class="line"><span class="code">        console.error(&#x27;登录失败:&#x27;, error)</span></span><br><span class="line"><span class="code">    &#125; finally &#123;</span></span><br><span class="line"><span class="code">        loading.value = false</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 在主应用文件main.js引入Element Plus： </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">// 样式导入顺序很重要</span><br><span class="line">import &#x27;element-plus/dist/index.css&#x27;</span><br><span class="line"></span><br><span class="line">import * as ElementPlusIconsVue from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line"></span><br><span class="line">// 注册所有图标</span><br><span class="line">for (const [key, component] of Object.entries(ElementPlusIconsVue)) &#123;</span><br><span class="line">app.component(key, component)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(createPinia())</span><br><span class="line">app.use(router)</span><br><span class="line">app.use(ElementPlus)</span><br><span class="line"></span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure>              </div>            </details></li>    <li>        <details class="folding-tag" green><summary> 在index.vue文件中配置路由守卫 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHistory &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">// 路由配置</span><br><span class="line">const routes = [</span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        path: &#x27;/login&#x27;,</span></span><br><span class="line"><span class="code">        name: &#x27;Login&#x27;,</span></span><br><span class="line"><span class="code">        component: () =&gt; import(&#x27;@/components/Login.vue&#x27;),</span></span><br><span class="line"><span class="code">        meta: &#123;</span></span><br><span class="line"><span class="code">            title: &#x27;登录&#x27;,</span></span><br><span class="line"><span class="code">            requiresAuth: false</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        path: &#x27;/&#x27;,</span></span><br><span class="line"><span class="code">        name: &#x27;Layout&#x27;,</span></span><br><span class="line"><span class="code">        component: () =&gt; import(&#x27;@/components/Layout.vue&#x27;),</span></span><br><span class="line"><span class="code">        meta: &#123;</span></span><br><span class="line"><span class="code">            requiresAuth: true</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        children: [</span></span><br><span class="line"><span class="code">            &#123;</span></span><br><span class="line"><span class="code">                path: &#x27;&#x27;,</span></span><br><span class="line"><span class="code">                name: &#x27;Home&#x27;,</span></span><br><span class="line"><span class="code">                component: () =&gt; import(&#x27;@/views/Home.vue&#x27;),</span></span><br><span class="line"><span class="code">                meta: &#123;</span></span><br><span class="line"><span class="code">                    title: &#x27;首页&#x27;,</span></span><br><span class="line"><span class="code">                    requiresAuth: true</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;,</span></span><br><span class="line"><span class="code">            &#123;</span></span><br><span class="line"><span class="code">                path: &#x27;profile&#x27;,</span></span><br><span class="line"><span class="code">                name: &#x27;Profile&#x27;,</span></span><br><span class="line"><span class="code">                component: () =&gt; import(&#x27;@/views/Profile.vue&#x27;),</span></span><br><span class="line"><span class="code">                meta: &#123;</span></span><br><span class="line"><span class="code">                    title: &#x27;个人中心&#x27;,</span></span><br><span class="line"><span class="code">                    requiresAuth: true</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        ]</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        path: &#x27;/:pathMatch(.*)*&#x27;,</span></span><br><span class="line"><span class="code">        name: &#x27;NotFound&#x27;,</span></span><br><span class="line"><span class="code">        component: () =&gt; import(&#x27;@/views/NotFound.vue&#x27;),</span></span><br><span class="line"><span class="code">        meta: &#123;</span></span><br><span class="line"><span class="code">            title: &#x27;404&#x27;,</span></span><br><span class="line"><span class="code">            requiresAuth: false</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line"><span class="code">    history: createWebHistory(import.meta.env.BASE_URL),</span></span><br><span class="line"><span class="code">    routes</span></span><br><span class="line"><span class="code">&#125;)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 白名单路由</span><br><span class="line">const whiteList = [&#x27;/login&#x27;]</span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">// 全局前置守卫</span></span><br><span class="line"><span class="code">router.beforeEach(async (to, from, next) =&gt; &#123;</span></span><br><span class="line"><span class="code">    // 设置页面标题</span></span><br><span class="line"><span class="code">    document.title = to.meta.title ? `$&#123;to.meta.title&#125; - Vue Demo` : &#x27;Vue Demo&#x27;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    const token = localStorage.getItem(&#x27;token&#x27;)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    if (token) &#123;</span></span><br><span class="line"><span class="code">        if (to.path === &#x27;/login&#x27;) &#123;</span></span><br><span class="line"><span class="code">        // 已登录状态下访问登录页，重定向到首页</span></span><br><span class="line"><span class="code">            next(&#123; path: &#x27;/&#x27; &#125;)</span></span><br><span class="line"><span class="code">        &#125; else &#123;</span></span><br><span class="line"><span class="code">            try &#123;</span></span><br><span class="line"><span class="code">                // 这里可以添加获取用户信息的逻辑</span></span><br><span class="line"><span class="code">                // const userStore = useUserStore()</span></span><br><span class="line"><span class="code">                // await userStore.getUserInfo()</span></span><br><span class="line"><span class="code">                   next()</span></span><br><span class="line"><span class="code">            &#125; catch (error) &#123;</span></span><br><span class="line"><span class="code">                // 获取用户信息失败，可能是token过期</span></span><br><span class="line"><span class="code">                localStorage.removeItem(&#x27;token&#x27;)</span></span><br><span class="line"><span class="code">                ElMessage.error(&#x27;登录状态已过期，请重新登录&#x27;)</span></span><br><span class="line"><span class="code">                next(`/login?redirect=$&#123;to.path&#125;`)</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125; else &#123;</span></span><br><span class="line"><span class="code">        // 未登录</span></span><br><span class="line"><span class="code">        if (whiteList.includes(to.path)) &#123;</span></span><br><span class="line"><span class="code">            // 白名单路由，直接访问</span></span><br><span class="line"><span class="code">            next()</span></span><br><span class="line"><span class="code">        &#125; else &#123;</span></span><br><span class="line"><span class="code">            // 其他路由重定向到登录页</span></span><br><span class="line"><span class="code">            next(`/login?redirect=$&#123;to.path&#125;`)</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 全局后置钩子</span><br><span class="line">router.afterEach(() =&gt; &#123;</span><br><span class="line">// 路由切换后的操作，例如关闭loading等</span><br><span class="line">// loading.value = false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 配置根组件 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span></span><br><span class="line">import &#123; RouterView &#125; from &#x27;vue-router&#x27;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">RouterView</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">RouterView</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>              </div>            </details>    </li><li><details class="folding-tag" green><summary> 安装依赖 启动服务器 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br><span class="line">pnpm dev</span><br></pre></td></tr></table></figure>              </div>            </details>    </li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot3+Vue3项目初始化--cursor</title>
      <link href="/2025/05/13/%E5%85%A8%E6%A0%88%E5%88%9D%E5%A7%8B%E5%8C%96cursor/"/>
      <url>/2025/05/13/%E5%85%A8%E6%A0%88%E5%88%9D%E5%A7%8B%E5%8C%96cursor/</url>
      
        <content type="html"><![CDATA[<h2 id="构建一个-Springboot3-Vue3-的全栈项目的步骤（举例：使用cursor构建图书馆管理系统）"><a href="#构建一个-Springboot3-Vue3-的全栈项目的步骤（举例：使用cursor构建图书馆管理系统）" class="headerlink" title="构建一个 Springboot3 + Vue3 的全栈项目的步骤（举例：使用cursor构建图书馆管理系统）"></a>构建一个 Springboot3 + Vue3 的全栈项目的步骤（举例：使用cursor构建图书馆管理系统）</h2><ol>    <li>        IDEA创建springboot项目，添加springweb，mysql，mybatis-plus，lombok，spring security，jwt等依赖    </li>    <li>        <details class="folding-tag" green><summary> 生成前端vue项目，安装依赖，启动前端项目 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br><span class="line">pnpm install</span><br><span class="line">pnpm dev</span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        使用cursor打开刚才创建的springboot和vue项目的根目录    </li>    <li>        <details class="folding-tag" green><summary> 添加.cursorrules </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 提示词</span></span><br><span class="line">你是一个 web 应用程序开发专家，精通Spring Boot, Vue3, ELement Plus 和相关技术栈。</span><br><span class="line">你的任务是帮助我实现一个图书馆管理系统。</span><br><span class="line"><span class="section">#### <span class="strong">**代码风格与结构**</span></span></span><br><span class="line"><span class="bullet">  -</span> 编写清晰，高效，具有良好注释的代码，提供精确的Spring Boot 和 Vue3 示例。</span><br><span class="line"><span class="bullet">  -</span> 遵循 Spring Boot 和 Vue3 的最佳实践与约定。</span><br><span class="line"><span class="bullet">  -</span> 使用RESTful API 设计模式构建后端服务。</span><br><span class="line"><span class="bullet">  -</span> 前后端代码遵循命名规范，方法和变量名使用 <span class="code">`camelCase`</span>，类名使用 <span class="code">`PascalCase`</span>。</span><br><span class="line"><span class="bullet">  -</span> 项目结构分明：</span><br><span class="line"><span class="bullet">    -</span> Spring Boot 后端：按&#x27;controller&#x27;,&#x27;service&#x27;,&#x27;repository&#x27;,&#x27;model&#x27;,&#x27;config&#x27;等模块创建目录。</span><br><span class="line"><span class="bullet">    -</span> Vue3 前端：按&#x27;views&#x27;,&#x27;components&#x27;,&#x27;store&#x27;,&#x27;router&#x27;,&#x27;utils&#x27;,&#x27;assets&#x27; 组织代码。</span><br><span class="line"><span class="section">#### <span class="strong">**Spring Boot 规范**</span></span></span><br><span class="line"><span class="bullet">  -</span> 使用 Spring Boot Starter 快速搭建项目和管理依赖。</span><br><span class="line"><span class="bullet">  -</span> 正确使用常用注解（<span class="code">`@SpringBootApplication`</span>,<span class="code">`@RestController`</span>,<span class="code">`@Service`</span>）。</span><br><span class="line"><span class="bullet">  -</span> 用 <span class="code">`@ControllerAdvice`</span> 和 <span class="code">`@ExceptionHandler`</span> 实现全局异常处理。</span><br><span class="line"><span class="bullet">  -</span> 利用 MyBatis-plus 简化数据库操作。</span><br><span class="line"><span class="section">#### <span class="strong">**Vue3 规范**</span></span></span><br><span class="line"><span class="bullet">  -</span> 代码基于 <span class="code">`&lt;script setup&gt;&lt;/script&gt;`</span> 语法，组件内逻辑清晰分离。</span><br><span class="line"><span class="bullet">  -</span> 使用Vue Router 实现路由管理，Pinia 实现状态管理。</span><br><span class="line"><span class="bullet">  -</span> 遵循模块化开发，组件命名清晰，按需引入 Element Plus 组件。</span><br><span class="line"><span class="bullet">  -</span> 使用 ES6+ 语法。代码风格简洁规范。</span><br><span class="line"><span class="section">#### <span class="strong">**测试与调试**</span></span></span><br><span class="line"><span class="bullet">  -</span> 后端测试：</span><br><span class="line"><span class="bullet">    -</span> 编写单元测试（JUnit 5）和集成测试（<span class="code">`@SpringBootTest`</span>）。</span><br><span class="line"><span class="bullet">    -</span> 使用 MockMvc 测试控制器层。</span><br><span class="line"><span class="bullet">  -</span> 前端测试：</span><br><span class="line"><span class="bullet">    -</span> 使用 Vitest 和 Vue Test Utils 编写组件单元测试。</span><br><span class="line"><span class="bullet">    -</span> 确保核心功能覆盖率达到 80% 以上。</span><br><span class="line"><span class="bullet">  -</span> 提供有好的错误提示和日志，后端使用 SLF4J 记录日志。</span><br><span class="line"><span class="section">#### <span class="strong">**性能与安全**</span></span></span><br><span class="line"><span class="bullet">  -</span> 实现缓存策略（如使用 Spring Cache）。</span><br><span class="line"><span class="bullet">  -</span> 后端异步处理使用 ``，必要时使用 WebFlux 实现响应式编程。</span><br><span class="line"><span class="bullet">  -</span> 使用 Spring Security 实现认证和授权，密码采用 BCrypt 编程。</span><br><span class="line"><span class="bullet">  -</span> 配置 CORS，确保跨域访问正常。</span><br><span class="line"><span class="section">#### <span class="strong">**性能与安全**</span></span></span><br><span class="line"><span class="bullet">  -</span> 使用 <span class="code">`application.yml`</span> 配置文件，按环境（开发，测试，生产）划分配置。</span><br><span class="line"><span class="bullet">  -</span> 使用 Docker 容器化应用，按需添加 CI/CD 流程。</span><br><span class="line"><span class="bullet">  -</span> 通过 spring Boot Actuator 实现监控和指标收集。</span><br><span class="line"><span class="section">#### <span class="strong">**API 文档**</span></span></span><br><span class="line"><span class="bullet">  -</span> 使用 Springdoc OpenAPI 生成后端 API 文档。</span><br><span class="line"><span class="bullet">  -</span> 提供前端集成调试工具（如 Postman Collection）。</span><br><span class="line"><span class="section">#### <span class="strong">**最终目标**</span></span></span><br><span class="line">构建一个功能齐全，用户友好的应用程序，包括用户管理，权限分配，数据展示等核心功能，注重代码质量，可分步骤生成。</span><br><span class="line"><span class="strong">**用以上规范，生成代码和建议。**</span></span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 告知cursor项目的基本代码 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 这个项目是一个 springboot+vue3 的项目脚手架，其中前端vue的代码写在 library-ui 目录下。</span><br><span class="line"><span class="bullet">2.</span> 接下来我会用这个项目创建一个图书馆管理系统，包含后端接口和前端页面。</span><br><span class="line"><span class="bullet">3.</span> 在我描述具体需求之前不要生成代码。</span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        <details class="folding-tag" green><summary> 向cursor描述图书馆管理系统需求 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## <span class="strong">**项目大纲：图书馆管理系统</span></span></span><br><span class="line"><span class="strong"><span class="section">### **</span>项目概述**</span></span><br><span class="line"><span class="bullet">-</span> 系统功能：</span><br><span class="line"><span class="bullet">  -</span> 管理员模块：</span><br><span class="line"><span class="bullet">    -</span> 图书管理：新增，编辑，删除，查询图书信息。</span><br><span class="line"><span class="bullet">    -</span> 用户管理：新增，编辑，删除，查询图书信息。</span><br><span class="line"><span class="bullet">    -</span> 借阅管理：审核借阅请求，管理借阅记录。</span><br><span class="line"><span class="bullet">  -</span> 读者模块：</span><br><span class="line"><span class="bullet">    -</span> 图书浏览：按分类，关键字搜索图书。</span><br><span class="line"><span class="bullet">    -</span> 借阅管理：借阅图书，查看借阅历史。</span><br><span class="line"><span class="bullet">    -</span> 个人信息管理：修改个人资料，密码等。</span><br><span class="line"><span class="bullet">-</span> 技术栈：</span><br><span class="line"><span class="bullet">  -</span> 后端：Spring Boot 3.x , MyBatis-plus , MySQl。</span><br><span class="line"><span class="bullet">  -</span> 前端：Vue3, ElementPlus, vite</span><br><span class="line"><span class="bullet">  -</span> 开发工具：Cursor AI 编辑器， IDEA</span><br></pre></td></tr></table></figure>              </div>            </details>    </li>    <li>        一步一步生成后端代码        <ol>            <li>修改jwt配置的 secretkey</li>            <li>询问cursor后端部分是否完成</li>        </ol>    </li>    <li>        调试后端项目        <ol>            <li>生成数据库初始化语句（初始化sql语句在resources下的db）</li>            <li>idea打开项目连接mysql数据库</li>            <li>粘贴sql语句到数据库，运行生成数据表</li>            <li>idea启动后端项目测试是否连接成功</li>        </ol>    </li>    <li>        <details class="folding-tag" green><summary> 生成前端代码 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 现在在 library-ui 目录下帮我生成前端页面代码，并对接后端接口实现图书馆管理系统的功能。</span><br><span class="line"><span class="bullet">2.</span> 请使用现代化美观的 Element-plus UI 来构建页面。</span><br><span class="line"><span class="bullet">3.</span> 如果需要执行命令，请先暂停生成，让我先执行命令。</span><br></pre></td></tr></table></figure>              </div>            </details>    </li></ol><h3 id="这个目录结构遵循了最佳实践和关注点分离原则，能够帮助更好地组织和管理代码。根据具体项目需求，可以适当调整或增减目录结构。"><a href="#这个目录结构遵循了最佳实践和关注点分离原则，能够帮助更好地组织和管理代码。根据具体项目需求，可以适当调整或增减目录结构。" class="headerlink" title="这个目录结构遵循了最佳实践和关注点分离原则，能够帮助更好地组织和管理代码。根据具体项目需求，可以适当调整或增减目录结构。"></a>这个目录结构遵循了最佳实践和关注点分离原则，能够帮助更好地组织和管理代码。根据具体项目需求，可以适当调整或增减目录结构。</h3><details class="folding-tag" green><summary> 🔍 SpringBoot3 + Vue3 后端项目的常用文件夹结构 </summary>              <div class='content'>              <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">**后端 (SpringBoot3) 目录结构：**</span><br><span class="line"></span><br><span class="line">1. `src/main/java/com/项目名称/`</span><br><span class="line">    - `controller/`: 控制器层，处理 HTTP 请求，接收前端数据</span><br><span class="line">    - `service/`: 业务逻辑层，实现具体的业务处理</span><br><span class="line">    - `dao/` 或 `repository/`: 数据访问层，与数据库交互</span><br><span class="line">    - `entity/` 或 `model/`: 实体类，对应数据库表结构</span><br><span class="line">    - `dto/`: 数据传输对象，用于前后端数据交互</span><br><span class="line">    - `config/`: 配置类，存放项目配置文件</span><br><span class="line">    - `utils/`: 工具类，存放通用工具方法</span><br><span class="line">    - `common/`: 公共类，如常量、枚举等</span><br><span class="line">    - `exception/`: 异常处理类</span><br><span class="line">    - `interceptor/`: 拦截器</span><br><span class="line">    - `security/`: 安全相关配置（如果使用 Spring Security）</span><br><span class="line"></span><br><span class="line">2. `src/main/resources/`</span><br><span class="line">    - `application.yml` 或 `application.properties`: 项目主配置文件</span><br><span class="line">    - `static/`: 静态资源文件</span><br><span class="line">    - `templates/`: 模板文件（如果需要）</span><br><span class="line">    - `mapper/`: MyBatis 的 XML 映射文件（如果使用 MyBatis）</span><br><span class="line"></span><br><span class="line">3. `src/test/`: 单元测试目录</span><br><span class="line"></span><br><span class="line">**前端 (Vue3) 目录结构：**</span><br><span class="line"></span><br><span class="line">1. `src/`</span><br><span class="line">    - `assets/`: 静态资源文件（图片、样式等）</span><br><span class="line">    - `components/`: 公共组件</span><br><span class="line">    - `views/`: 页面视图组件</span><br><span class="line">    - `router/`: 路由配置</span><br><span class="line">    - `store/`: 状态管理（如 Pinia 或 Vuex）</span><br><span class="line">    - `api/`: API 接口封装</span><br><span class="line">    - `utils/`: 工具函数</span><br><span class="line">    - `styles/`: 全局样式文件</span><br><span class="line">    - `hooks/`: 组合式函数</span><br><span class="line">    - `types/`: TypeScript 类型定义（如果使用 TS）</span><br><span class="line"></span><br><span class="line">2. `public/`: 公共静态资源</span><br><span class="line"></span><br><span class="line">3. 根目录重要文件：</span><br><span class="line">    - `package.json`: 项目依赖配置</span><br><span class="line">    - `vite.config.js`: Vite 配置文件</span><br><span class="line">    - `.env.*`: 环境变量配置文件</span><br><span class="line">    - `tsconfig.json`: TypeScript 配置（如果使用 TS）  </span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>忙碌了一天，我终于上线了微信小程序🍬🍬🍬</title>
      <link href="/2025/05/09/%E5%BF%99%E7%A2%8C%E4%BA%86%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%88%91%E7%BB%88%E4%BA%8E%E4%B8%8A%E7%BA%BF%E4%BA%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%9F%EF%BC%81%F0%9F%8D%AC%F0%9F%8D%AC%F0%9F%8D%AC/"/>
      <url>/2025/05/09/%E5%BF%99%E7%A2%8C%E4%BA%86%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%88%91%E7%BB%88%E4%BA%8E%E4%B8%8A%E7%BA%BF%E4%BA%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%9F%EF%BC%81%F0%9F%8D%AC%F0%9F%8D%AC%F0%9F%8D%AC/</url>
      
        <content type="html"><![CDATA[<p>今天虽然有三节课，但是我感觉我除了踢了一节课球之外，很多时间我都在写这个小程序，本来就是想分享一下二维码给朋友看看，但是预览的二维码<br>除了管理员也就是开发者自己能看，其他人是看不了的，所以我就去搜有什么方法才能让别人也能看未上线的小程序。</p><p>然后就了解到必须要把小程序打包上传到微信公众平台，设置为体验版本，然后就可以分享二维码了。</p><p>但是就是这么简单的一个步骤。花费了我中午俩小时，晚上三个小时。f**k。<br>因为我之前用的是小程序测试号，但是我不知道，就只把微信开发者工具的报错喂给ai。<br>然而这ai确实太笨了，一直抓不住重点，我还相信它，到处写bug、、中午的俩个小时是绝望地，改了那么久最后还是还实现。</p><p>晚上其实也不是很好过。我甚至把项目的底层依赖都换了一遍，然后一运行全tm是错，喂给ai，越改越错之后，我受不了。<br>我直接回溯到我之前写的那个版本，因为我用git管理了，直接把github上面我存储库的代码重新拿来写。</p><p>经过之前的无效奋战之后，我收获了失败的教训，那就是微信开发者工具其实有很多它自己的规矩。<br>不是web端的所有规则它都一样适应。所以我真想骂wxg，做的什么bug开发工具。特别是那个域名校验，单包上传2M，我tm之前静态资源全都放在项目里面的，<br>然后整体体积来到了2700k，然后就一直报错，预览都砍不了。后来也是摸索出来了原来也可以在详情里面设置不校验域名，在预览或真机调试的时候<br>可以设置单包上传最大体积为4M。</p><p>这才解决了我之前那痛苦面具的问题。🍬🍬🍬</p><p>至于我最后是怎么实现上传的，那就是在我申请了两个正式号实践之后，才能上传代码。<br>最重要的还是把静态资源我使用了PICU图床，然后就大大减少了打包后的体积。然后就上传通过了。</p><p>接着就来到了微信公众平台，然后我就设置了体验版本，就可以分享二维码辣！</p><p>下面分享一下上传成功的截图吧，无法言喻的喜悦🤗🍉<br><img src="/img/微信小程序上传成功.png" alt="微信小程序上传成功图片"><br>如果有需要的话，记得联系我把你加入到体验成员中，因为只有在微信公众平台设置加入体验成员，扫描这个二维码才能看得到哦<br><img src="/img/小程序体验版二维码.jpg" alt="二维码体验"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 最近更新 </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2025/03/27/note/"/>
      <url>/2025/03/27/note/</url>
      
        <content type="html"><![CDATA[<div class="timeline  green"><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>学习直线</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-5-4</p></div>        </div>        <div class='timeline-item-content'><p>先在这里发布个预告，最近在做的一款微信小程序即将完工，可以猜猜它有什么功能呢？哈哈，期待后续吧！</p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-4-13</p></div>        </div>        <div class='timeline-item-content'><p><a href="https://jcn1jdbj27vp.feishu.cn/wiki/IDrFwBh0aiklJckuWtMcBWYKnRc?from=from_copylink">Vue面试八股</a></p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-4-5</p></div>        </div>        <div class='timeline-item-content'><p><a href="https://jcn1jdbj27vp.feishu.cn/wiki/GydewQXQriQrVvkiewlcoT8Qndf?from=from_copylink">vue3新特性</a></p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-3-30,blue</p></div>        </div>        <div class='timeline-item-content'><p><a href="https://jcn1jdbj27vp.feishu.cn/wiki/OY08wwD4MiftZjklRXEcIJpNn2c?from=from_copylink">Vue2 note</a></p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-3-27,blue</p></div>        </div>        <div class='timeline-item-content'><p><a href="https://jcn1jdbj27vp.feishu.cn/wiki/RXc5wPiGOit0KokgR8ecQFCgncf?from=from_copylink">git常用指令-协作指令</a></p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025-3-26,blue</p></div>        </div>        <div class='timeline-item-content'><p><a href="https://jcn1jdbj27vp.feishu.cn/mindnotes/QC2Pb33qLmlJ87njdOicseZ4nAb?from=from_copylink">javaScript学习笔记</a></p></div>      </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 最近更新 </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天才思想家🤔</title>
      <link href="/2025/03/27/%E5%A4%A9%E6%89%8D%E6%80%9D%E6%83%B3%E5%AE%B6/"/>
      <url>/2025/03/27/%E5%A4%A9%E6%89%8D%E6%80%9D%E6%83%B3%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>只要活着人的心脏就不会停止跳动，我们的大脑也不会停止思考。<br>那么，一天的24小时我们的大脑思考了些什么呢？<br>如果在一天结束的最后几分钟，回想这一天做了什么，那可能想到的东西是有限的。<br>以我自己举例<br>从早上九点二十起床，到洗漱，再到9:50到教室上课，然后再到11:25下课，骑车去食堂吃完饭差不多就12:00，然后回宿舍。<br>回来刷了会儿bilibili的视频，时间就来到了13:00左右，然后睡午觉到14:00，起床洗个脸又去思学楼上课，16:05下课。<br>在课上一直在看vue，下课就又回到了宿舍，写了blog，直到17:50，跟室友出去找了家钵钵鸡店吃饭。<br>因为我本来没怎么吃辣的，但是鼻子下边还是长痘了，所以我决定吃辣报复一下身体，告诉它谁才是这具身体真正的主人。<br>不得不说，正对东一门前面的那家”乐山聋子钵钵鸡”还挺好吃的。<br>吃完差不多就18:50，然后我今天又回到了宿舍，现在是20:06，正在写这篇文章。<br>ε=(´ο｀*)))唉，本来我还有很多的学习内容的，但是今天就是提不起兴趣学习。<br>大概率跟以下几个因素有关:</p><ol><li>上周六骑了一天车，燃尽了。导致我这周还没缓过来。</li><li>今天上午的两节概率论课，特别是第二节课讲的卡方分布，t分布，f分布啥的，我当时没听懂。导致直接摆烂了。</li><li>下午上的web的课，我也是又忘了带核心装备—耳机了，所以我只能干盯着视频看。</li><li>今天周四，周五上午一节足球课，下午一节毛概课，机器学习实验周一上了，周六的web实验调到下周了，所以<br>这周基本算放假了，然后今天我就不想学习了。</li></ol></blockquote><hr><blockquote><p>回到主题，今天我的大脑都思考了些什么。<br>我想我们的大脑思考的最多的是一天生活的行程。<br>中途的周转时间太长了，洗漱的时间，吃饭的时间，上下课的通勤时间，在宿舍刷视频的时间。<br>但是这些都是不可避免的，但我有总觉得这些时间都被浪费了。<br>好像他们可以像AJAX里面的异步处理机制，我们同样可以把这些时间有效利用起来。</p><ol><li>在洗漱的时候，我就得思考一下待会儿出门得带什么东西，下一步该干什么。</li><li>在吃饭的时候，我不喜欢玩手机，因为一个手拿，一个手吃饭，脑袋还要偏着，这样很不舒服。<br>所以我就喜欢在吃饭的时候放空脑袋，就当一个安安静静的干饭人。这也是一个给大脑休息的机会。</li><li>上下课的通勤时间，因为我不是走路，所以我通勤时间不长，光骑车我就得注意安全，所以这个时间已经被有效利用了。 </li><li>在宿舍刷视频，这个我觉得可以缩短一下这个时间，也不是说不刷。只是白天少刷，晚上睡觉前可以看一下。<br>白天还是尽量把时间用到学习和生活上面。</li><li>上课的时候该干嘛，那当然是听课了。当然这也仅限于正常的课程，你要是让我在毛概，信息检索这样的水课上面去认真听讲，<br>那就是就是不谋财但害命。我一般都是在这样的课上拿平板看学习视频，然后在课后时间会去做笔记，和做一些demo。<br>我一般不会在课上做笔记，因为我是用平板连的蓝牙键盘，在飞书上写笔记，所以我怕敲键盘影响到别人。<br>除非是机器学习或者web实验课上，做完了课上要求知乎，我才可能写笔记。因为这些课上本来就是上机的。<br>没错，我就是这么一个喜欢为别人着想的善良的人。(别夸，容易飘😆)</li><li>晚上23点熄灯后，我才会去洗漱，到23:15左右上床，然后刷一会儿bilibili，小红书，qq，了解一些行内和行外的信息。<br>基本在00:00我就会睡觉了，最晚不超过1点，这种情况可能是看到某个好看的解说视频了，或者在群聊里面跟大佬聊天。<br>说句题外话，这两天我明显感觉我的睡眠变好了。以前可能在床上要翻身好几次，才能入睡。现在躺着一会儿就睡着了。<br>也没以前多梦了。起床之后也不感觉很累，反倒是觉得睡得很足，很轻松。<br>这个跟我之前在小红书看到的一个视频有关，就是调整一下睡觉的姿势。</li><li>侧身睡觉</li><li>一只手垫着自己的脸，大拇指和食指卡着耳朵几乎是这个样子。</li><li>另一只手放在自己的大腿上，侧身一般腿都弯着的。这个睡觉姿势是真的很舒服。</li></ol></blockquote><hr><blockquote><p>好了，这就是今天的日记了，现在是20:44了。我突然又想开始学习了。</p><h2 id="那就下次再见吧，拜拜溜😉"><a href="#那就下次再见吧，拜拜溜😉" class="headerlink" title="那就下次再见吧，拜拜溜😉"></a>那就下次再见吧，拜拜溜😉</h2></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 最近更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的近况</title>
      <link href="/2025/03/02/update/"/>
      <url>/2025/03/02/update/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://jcn1jdbj27vp.feishu.cn/mindnotes/QC2Pb33qLmlJ87njdOicseZ4nAb?from=from_copylink">javaScript学习笔记</a></p><p><code>最新的内容都放在导航栏下的随心记里面了，这个文章不再更新，但是也不会删除。</code></p><p><span class='p green'>done</span> <del>新增了留言板，发送图片的功能还在研究中…</del></p><p><span class='p green'>done</span> <del>1.日夜切换的按钮从设置中移除，固定在侧边栏右下角，向上滑动就会显示。<br>(切换后主页变成星空背景，还增加有流星效果。)</del></p><p><span class='p green'>done</span> <del>2.关于页面的内容暂时填充为随心记，用来记录一些闲言碎语。</del></p><p><span class='p red'>dropped</span> <del>3.评论区的的照片上传功能需要图床，目前没找到合适的，暂时先放一放。</del></p><p><span class='p red'>dropped</span> <del>4.可能在主页添加一个搜索功能。</del></p><p><span class='p blue'>learning..</span> <del>最近回去深入学习vue2-3了<del></p><p><span class='p green'>done</span> <del>js的api开始涉足，会写一些小demo。<del></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 最近更新 </tag>
            
            <tag> blog开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周六周六</title>
      <link href="/2025/03/01/%E5%91%A8%E5%85%AD%E5%91%A8%E5%85%AD/"/>
      <url>/2025/03/01/%E5%91%A8%E5%85%AD%E5%91%A8%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="清晨-٩-ˊᗜˋ-و"><a href="#清晨-٩-ˊᗜˋ-و" class="headerlink" title="清晨 ٩(ˊᗜˋ*)و"></a>清晨 ٩(ˊᗜˋ*)و</h3><ul><li>今天早上起来的时候是12点了，虽然不算早，但是还是很晚了。</li></ul><p><img src="/img/企鹅思考.jpg" alt="若有所思，思考失败" style="zoom:25%;"></p><blockquote><p>收拾出门，先去吃饭，平时的话我早上反正是不吃饭的，中午就去一食堂吃东北焖肉饭，<br>没办法，谁让他家的素菜随便加呢，我就毫不客气了。晚上呢，一般就买两个肉包和两个<br>豆沙包就解决了。一个字：香。三个字：<psw>还是香</psw>。</p></blockquote><ul><li>周末嘛，还是得出去吃</li></ul><blockquote><p>上学期经常去照顾杨铭宇家的黄焖鸡，以前都是点不辣的，后来就试试微辣，<br>吃完辣的没边了，那跟辣椒水灌喉咙一个。今天也是想再受受罪，还是点的微辣，<br>但是感觉没之前辣，只是有点烫。看来是我过年在家吃的太辣了。</p></blockquote><ul><li>下午就继续来改blog。</li></ul><blockquote><p>首先把导航栏的icon都换成多色图标了，还添加了faa-tada的动态效果。<br>另外把信息栏卡片的样式设置的更好看了些，这些样式可不是我自己写的，是<br>Fomalhaut大佬的源码，我只是把它改了改。另外在侧边栏添加了安知鱼的时钟，<br>这样就可以显示当前时间和访客的地理位置了。但是目前我在高德上申请的api key似乎<br>有点问题，暂时获取不到访客的地理位置，所以就默认显示我的位置了。</p></blockquote><ul><li>晚上干嘛呢</li></ul><blockquote><p>目前导航栏的很多页面都没有写，所以得把这些页面给创建出来，然后再添加一些<br>功能吧，嗯还有留言板下面的评论区我今天看看能不能做了。</p></blockquote><hr><h2 id="就这样吧，明天见。ε-･ω･-ﾟ-･☆"><a href="#就这样吧，明天见。ε-･ω･-ﾟ-･☆" class="headerlink" title="就这样吧，明天见。ε(*･ω･)_/ﾟ:･☆"></a>就这样吧，明天见。ε(*･ω･)_/ﾟ:･☆</h2>]]></content>
      
      
      <categories>
          
          <category> 今天也要学点啥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我有罪呜呜..呜</title>
      <link href="/2025/02/26/%E6%88%91%E6%9C%89%E7%BD%AA%E5%91%9C%E5%91%9C..%E5%91%9C/"/>
      <url>/2025/02/26/%E6%88%91%E6%9C%89%E7%BD%AA%E5%91%9C%E5%91%9C..%E5%91%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="只学了一点点，玩的却不止一点点"><a href="#只学了一点点，玩的却不止一点点" class="headerlink" title="只学了一点点，玩的却不止一点点"></a>只学了一点点，玩的却不止一点点</h3><p>下午染上了麻将啊，就想看看两万豆多久能输完，和室友双排打了一下午啊，<br>一直到六点才输完了。</p><p>没办法只能晚上来写博客了。</p><blockquote><p>今天呢，添加了一个留言板，但是还没写好，暂时不能留言，先留着吧</p></blockquote><hr><blockquote><p>另外把主页改成一图流样式了，这样看着可能更简洁一些，<br>左下角增加了一个看板娘，看着很可爱吧</p></blockquote><p>&lt;就这样吧，明天再继续改改，现在还在苦命的写概率统计的作业…&gt;</p><hr>]]></content>
      
      
      <categories>
          
          <category> 今天也要学点啥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真的真的玩够了？</title>
      <link href="/2025/02/25/%E5%BC%80%E5%AD%A6%E7%AC%AC%E4%BA%8C%E5%A4%A9%E4%B9%8B%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%EF%BC%9F/"/>
      <url>/2025/02/25/%E5%BC%80%E5%AD%A6%E7%AC%AC%E4%BA%8C%E5%A4%A9%E4%B9%8B%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="只要一点点"><a href="#只要一点点" class="headerlink" title="只要一点点"></a>只要一点点</h3><blockquote><p>昨天完成了队长给的需求，把对话框的侧边栏的原始示例删除了，更新了在对话框输入信息后，侧边栏自动加载历史信息的功能。<br>同时为了解决侧边栏宽度不够，但又不能过多占用主页面的问题，我把每条信息的标题设置了最长显示前8个字符，后面的用…隐藏了，<br>然而当鼠标悬浮到标题上时，会显示完整的标题，这样就可以完整的看到每条信息的标题了。 </p><p>今天呢，就是把昨天的代码给提交到github上，但是我之前没做过，所以我就叽叽歪歪的搞了好几个小时，在上课前终于push成功了。<br>然后晚上没课又来看一下markdown的语法，争取后面把文档写的漂亮一点。</p><p>明天上午满课，下午没课，目前没给我安排其他需求，所以我下午就可以来更新我的blog的一些功能了。嗯..目前经朋友推荐，<br>尝试添加一个评论区，在文章下可以评论的这种。我自己呢又想在导航栏上添加一个随心记，记录日常碎碎骂。</p></blockquote><hr><p>玩会儿睡了，今天就到站了吧。</p><video src="/video/confident.mp4" controls="controls" width="100%"></video>]]></content>
      
      
      <categories>
          
          <category> 今天也要学点啥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> llm对话框组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑的那些日子</title>
      <link href="/2025/02/25/%E8%B8%A9%E5%9D%91%E7%9A%84%E9%82%A3%E4%BA%9B%E6%97%A5%E5%AD%90/"/>
      <url>/2025/02/25/%E8%B8%A9%E5%9D%91%E7%9A%84%E9%82%A3%E4%BA%9B%E6%97%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<!-- 上方是 Front-matter 元数据，下方是正文内容 --><h2 id="从购买服务器到上线个人博客你该踩哪些坑？"><a href="#从购买服务器到上线个人博客你该踩哪些坑？" class="headerlink" title="从购买服务器到上线个人博客你该踩哪些坑？"></a>从购买服务器到上线个人博客你该踩哪些坑？</h2><hr><h3 id="1-制作小网页到入坑服务器"><a href="#1-制作小网页到入坑服务器" class="headerlink" title="1.制作小网页到入坑服务器"></a>1.制作小网页到入坑服务器</h3><blockquote><p>当时也是心血来潮，本来想着写一个小网页，分享给朋友看。但是网页写出来之后只能在同一局域网下访问。<br>然后我就去了解了路由器怎么把内网上的东西映射到外网上。没搞清楚解决办法，歪打正着了解到在网站上部署网页<br>就好了，通过url外网所有人都可以访问到。然后就去腾讯租服务器，开始送一个月的使用权，本来觉得免费的那就玩玩呗。<br>申请了域名，绑定了服务器ip后就可以访问到网站了，但是外网还是访问不到，因为还需要在工信局备案。好那就申请<br>备案，结果其中一个流程就是服务器必须要三个月使用权以上才有资格备案，tmd我又不得不自掏腰包一个月45，<br>最低买三个月，135块钱就花出去了。后面等了一周，备案通过，我就开始部署网页了，因为当时服务器配置的系统是宝塔，<br>所以所有文件上传到宝塔上部署，那么我就在宝塔文件根目录上上传vue项目的打包文件dist，这下外网可以访问到我的网站了。<br>也是让页面成功的展示出来了，我也感受到了独立完成一件与专业和兴趣相关的事的成就感。</p></blockquote><hr><h3 id="2-宝塔是个很日龙的东西"><a href="#2-宝塔是个很日龙的东西" class="headerlink" title="2.宝塔是个很日龙的东西"></a>2.宝塔是个很日龙的东西</h3><blockquote><p>没过多久，我就又想着服务器不能就这么放着，我可是花了钱的，我可以做个博客，给网站做的好看一点，不能让一个<br>大盘子只上几片菜叶子。然后我也在各个渠道上阅览别人的博客都是怎么做的，在b站上面偶然看到的一个blog，特别好看，<br>而且还开源到github上了，还有网站的域名，我就去访问，这不看不知道，一看吓一跳。我真是小刀拉屁股—开了眼了。<br>从来没见过这么好看的个人博客。然后我就在github把文件下下来，自己改配置文件。改了之后觉得很满意，就把文件打包上传到宝塔上，<br>但是跟之前上传vue不同，这个是由next.js写的项目，部署成PHP项目，在网站上根本就访问不到，console说资源找不到。<br>我猜测是因为没有index.html不能简单的部署成php项目，这是一个next.js集成的项目，应该跟node项目有关。<br>但是我在哔哩哔哩上面看了很多视频，还是不知道该怎么把这个next项目部署成功。花费了好几天的时间，<br>所以现阶段我可能会搁置这个好看的主页，先把博客的框架搭建出来才是最主要的，所以我现在去部署hexo的butterfly博客…</p></blockquote><hr><h3 id="3-在被拷打了不知道多少遍后，也是把框架给搭起来了"><a href="#3-在被拷打了不知道多少遍后，也是把框架给搭起来了" class="headerlink" title="3.在被拷打了不知道多少遍后，也是把框架给搭起来了"></a>3.在被拷打了不知道多少遍后，也是把框架给搭起来了</h3><blockquote><p>今天是2.18号，成功部署了hexo博客。通过vercel部署在<a href="http://jiejun.online上，同时宝塔部署在了http://web.jiejun.online上，">http://jiejun.online上，同时宝塔部署在了http://web.jiejun.online上，</a><br>都实现了hexo博客的部署。通过宝塔部署的文件是.deploy_git，原来这个就是hexo项目打包好的文件，害得我还去vercel部署。<br>第二种上线博客方式就是通过github托管代码，然后在vercel上连接我的SpringVuejiejun.github.io仓库,其实这个名字也就是github给<br>我注册的域名。链接好仓库后，还添加域名，我用了jiejun.online，然后去腾讯云DNS解析。这样就可以通过域名jiejun.online访问到我的<br>blog了。第二种方式整个部署过程就是git bash安装node.js，hexo环境，然后创建一个项目，在项目根目录下hexo init初始化，项目的环境<br>就搭建好了，然后再npm i安装依赖，一个原始框架就出来了。我再下载了butterfly主题，在根目录下通过_config.butterfly.yml修改配置，<br>改好后，在终端输入hexo cl; hexo g; hexo d 提交项目到github仓库，vercel实时获取github仓库上的代码，直接访问jiejun.online就可以<br>看到部署的hexo博客了。</p></blockquote><p>貌似宝塔跟这种方式差不多，但是如果有服务器的话还是宝塔部署比较好，因为vercel部署没有后端，而宝塔可以部署后端项目，这样就<br>可以实现响应式博客，缺点就是宝塔每次都要上传静态打包文件。而vercel只需要在IDE里面指令提交就好了。相同之处就是二者都需要在DNS<br>提供商处解析域名。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> 踩坑经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改log</title>
      <link href="/2025/02/20/%E9%AD%94%E6%94%B9log/"/>
      <url>/2025/02/20/%E9%AD%94%E6%94%B9log/</url>
      
        <content type="html"><![CDATA[<h2 id="web整改的第一篇文章"><a href="#web整改的第一篇文章" class="headerlink" title="web整改的第一篇文章"></a>web整改的第一篇文章</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/18/hello-world/"/>
      <url>/2025/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a><br><a href="../../themes">themes</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
